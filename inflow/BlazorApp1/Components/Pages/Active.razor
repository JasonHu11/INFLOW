@page "/activity"
@using YourProjectName.Services
@implements IDisposable
@inject NavigationManager Navigation

<PageTitle>CSV Data</PageTitle>

<h1>CSV Data Viewer</h1>

@if (CsvDataService.Headers == null || CsvDataService.CsvData == null)
{
    <div class="alert alert-warning">
        No data available. <a href="/" class="alert-link">Upload a CSV file</a>.
    </div>
}
else
{
    <div class="mb-3">
        <button @onclick="ReturnToUpload" class="btn btn-primary">
            ← Upload New File
        </button>
    </div>

    @if (TopIdHash.Any())
    {
        <div class="alert alert-info alert-dark">
            <strong>Top 5 IDHASH values:</strong>
            <ul>
                @foreach (var entry in TopIdHash)
                {
                    <li>@entry.Key (appeared @entry.Value times)</li>
                }
            </ul>
        </div>
    }

    @if (TopDevId.Any())
    {
        <div class="alert alert-secondary alert-dark">
            <strong>Top 5 DEVID values:</strong>
            <ul>
                @foreach (var entry in TopDevId)
                {
                    <li>@entry.Key (appeared @entry.Value times)</li>
                }
            </ul>
        </div>
    }

    @if (TopMachine.Any())
    {
        <div class="alert alert-warning alert-dark">
            <strong>Top 5 MACHINE values:</strong>
            <ul>
                @foreach (var entry in TopMachine)
                {
                    <li>@entry.Key (appeared @entry.Value times)</li>
                }
            </ul>
        </div>
    }

    <div class="table-responsive">
        <table class="table table-bordered table-hover">
            <thead class="table-dark">
                <tr>
                    @foreach (var header in CsvDataService.Headers)
                    {
                        <th>@header</th>
                    }
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < CsvDataService.CsvData.Count; i++)
                {
                    <tr>
                        @foreach (var cell in CsvDataService.CsvData[i])
                        {
                            <td>@cell</td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<KeyValuePair<string, int>> TopIdHash = new();
    private List<KeyValuePair<string, int>> TopDevId = new();
    private List<KeyValuePair<string, int>> TopMachine = new();

    protected override void OnInitialized()
    {
        CsvDataService.DataLoaded += StateHasChanged;

        if (CsvDataService.Headers != null && CsvDataService.CsvData != null)
        {
            CalculateTopValues();
        }
    }

    private void CalculateTopValues()
    {
        TopIdHash = GetTopOccurrences("IDHASH");
        TopDevId = GetTopOccurrences("DEVID");
        TopMachine = GetTopOccurrences("MACHINE");
    }

    private List<KeyValuePair<string, int>> GetTopOccurrences(string columnName)
    {
        var columnIndex = CsvDataService.Headers.FindIndex(h => h.Equals(columnName, StringComparison.OrdinalIgnoreCase));
        if (columnIndex == -1)
            return new List<KeyValuePair<string, int>>();

        var frequency = new Dictionary<string, int>();

        foreach (var row in CsvDataService.CsvData)
        {
            if (row.Count() > columnIndex)
            {
                var value = row[columnIndex];
                if (!string.IsNullOrWhiteSpace(value))
                {
                    if (frequency.ContainsKey(value))
                        frequency[value]++;
                    else
                        frequency[value] = 1;
                }
            }
        }

        return frequency
            .OrderByDescending(kv => kv.Value)
            .Take(5)
            .ToList();
    }

    private void ReturnToUpload()
    {
        CsvDataService.ClearData();
        Navigation.NavigateTo("/");
    }

    public void Dispose()
    {
        CsvDataService.DataLoaded -= StateHasChanged;
    }
}
